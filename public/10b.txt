// parent.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <string.h>

#define SHM_NAME "/prime_shm"
#define SIZE 4096

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s M N\n", argv[0]);
        return 1;
    }

    int M = atoi(argv[1]);
    int N = atoi(argv[2]);

    if (M > N || M < 0 || N < 0) {
        fprintf(stderr, "Invalid range. Make sure 0 <= M <= N\n");
        return 1;
    }

    // Create shared memory
    int shm_fd = shm_open(SHM_NAME, O_CREAT | O_RDWR, 0666);
    ftruncate(shm_fd, SIZE);
    void *ptr = mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);

    pid_t pid = fork();

    if (pid == 0) {
        // Child
        execlp("./child", "child", argv[1], argv[2], NULL);
    } else if (pid > 0) {
        // Parent
        wait(NULL);
        printf("\nPARENT: Child completed\n");
        printf("Prime numbers between %d and %d:\n", M, N);
        printf("%s\n", (char *)ptr);

        // Cleanup
        munmap(ptr, SIZE);
        shm_unlink(SHM_NAME);
    } else {
        perror("Fork failed");
        return 1;
    }

    return 0;
}

// child.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>

#define SHM_NAME "/prime_shm"
#define SIZE 4096

int is_prime(int num) {
    if (num < 2) return 0;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) return 0;
    }
    return 1;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: child M N\n");
        return 1;
    }

    int M = atoi(argv[1]);
    int N = atoi(argv[2]);

    // Open existing shared memory
    int shm_fd = shm_open(SHM_NAME, O_RDWR, 0666);
    void *ptr = mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    char *buf = (char *)ptr;

    printf("CHILD: Generating primes between %d and %d\n", M, N);
    for (int i = M; i <= N; i++) {
        if (is_prime(i)) {
            char temp[16];
            sprintf(temp, "%d ", i);
            strcat(buf, temp);
        }
    }

    return 0;
}
